#!/usr/bin/env perl

# i3-select-theme --- Update GTK, Emacs, Alacritty, and Fuzzel themes

# Copyright Â© 2025 Daniel Hennigar

# This program is free software: you can redistribute it and/or modify
# it under the terms of either:
#
#   a) the Artistic License 2.0, or
#   b) the GNU General Public License as published by the Free Software
#      Foundation; either version 3 of the License, or (at your option) any
#      later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the LICENSE file
# for more details.

use 5.040;
use Carp;
use English      qw(-no_match_vars);
use Getopt::Long qw(:config auto_help auto_version);
use Readonly;
use File::Copy;

our $VERSION = '0.01';
my $dmenu = 'fuzzel -d -l 6 -p "Select theme > "';

GetOptions( 'dmenu-cmd' => \$dmenu )
  or croak 'Could not parse options';

if ( !$ENV{DISPLAY} || !$ENV{WAYLAND_DISPLAY} ) {
    croak 'Is i3 or sway running?';
}

my $theme = $ARGV[0] // qx(echo -e "day\nnight\nmorning\nbright\n" | $dmenu);
chomp $theme;

if ( $theme eq q() ) {
    carp 'No theme selected. Exiting.';
}

sub update_fuzzel {
    my %colors = @_;
    my $file   = "$ENV{HOME}/.config/fuzzel/fuzzel.ini";
    Readonly my $MAX_SIZE => 10 * 1024;    # 10 KB limit

    if ( -s $file > $MAX_SIZE ) {
        carp "File $file exceeds $MAX_SIZE bytes.";
    }

    open my $fh, '+<', $file ## no critic (InputOutput::RequireBriefOpen)
      or carp "Cannot open $file for reading/writing: $OS_ERROR";

    my @lines;
    while ( my $line = <$fh> ) {
        if ( $line =~ /^([\w-]+)=/xms ) {
            my $key = $1;
            my $hash_key = $key =~ tr/-/_/r;
            say "Key: $hash_key";
            if ( exists $colors{$hash_key} ) {
                say "Found match: $colors{$hash_key}";
                $line = "$key=$colors{$hash_key}\n";
            }
        }
        push @lines, $line;
    }

    seek $fh, 0, 0 or carp "Cannot seek in $file: $OS_ERROR";
    print {$fh} @lines or carp "Cannot print lines to file: $OS_ERROR";

    truncate $fh, tell $fh or carp "Cannot truncate $file: $OS_ERROR";
    close $fh or carp "Error closing $file: $OS_ERROR";

    return 1;
}

sub run_command {
    my ($cmd) = @_;
    if ( system($cmd) == 0 ) {
        return 1;
    }
    else {
        carp "Failed to execute: $cmd\nExit code: $CHILD_ERROR";
        return 0;
    }
}

sub set_gtk_scheme {
    my ($scheme) = @_;

    run_command(
        "gsettings set org.gnome.desktop.interface color-scheme $scheme")
      or croak 'Could not update GTK scheme';

    return 1;
}

sub set_alacritty_theme {
    my ($alacritty_theme) = @_;
    my $alacritty_dir = "$ENV{HOME}/.config/alacritty/";

    copy( "$alacritty_dir" . "themes/$alacritty_theme" . '.toml',
        "$alacritty_dir" . 'colors.toml' )
      or croak "Copy failed: $OS_ERROR";

    return 1;
}

sub set_emacs_theme {
    my ($emacs_theme) = @_;

    run_command("emacsclient -e \"(load-theme-disable-others '$emacs_theme)\"")
      or croak 'Could not update Emacs theme';

    return 1;
}

if ( $theme eq 'day' ) {
    set_gtk_scheme('prefer-light');
    set_alacritty_theme('tomorrow-day');
    set_emacs_theme('tomorrow-day');
    update_fuzzel(
        background      => 'ffffffff',
        text            => '4d4d4cff',
        prompt          => '4d4d4cff',
        placeholder     => '8e908cff',
        input           => '4d4d4cff',
        match           => '4271aeff',
        selection       => 'd6d6d6ff',
        selection_text  => '4d4d4cff',
        selection_match => 'c82829ff',
        counter         => '8e908cff'
    );
}
if ( $theme eq 'night' ) {
    set_gtk_scheme('prefer-dark');
    set_alacritty_theme('tomorrow-night');
    set_emacs_theme('tomorrow-night');
    update_fuzzel(
        background      => '1d1f21ff',
        text            => 'c5c8c6ff',
        prompt          => 'c5c8c6ff',
        placeholder     => '969896ff',
        input           => 'c5c8c6ff',
        match           => '81a2beff',
        selection       => '373b41ff',
        selection_text  => 'c5c8c6ff',
        selection_match => 'cc6666ff',
        counter         => '969896ff'
    );
}
if ( $theme eq 'morning' ) {
    set_gtk_scheme('prefer-light');
    set_alacritty_theme('tomorrow-morning');
    set_emacs_theme('tomorrow-morning');
    update_fuzzel(
        background      => 'fff0d0ff',
        text            => '4d4d4cff',
        prompt          => '4d4d4cff',
        placeholder     => '8e908cff',
        input           => '4d4d4cff',
        match           => '4271aeff',
        selection       => 'e6d6a0ff',
        selection_text  => '4d4d4cff',
        selection_match => 'c82829ff',
        counter         => '8e908cff'
    );
}
if ( $theme eq 'bright' ) {
    set_gtk_scheme('prefer-dark');
    set_alacritty_theme('tomorrow-bright');
    set_emacs_theme('tomorrow-bright');
    update_fuzzel(
        background      => '000000ff',
        text            => 'eaeaeaff',
        prompt          => 'eaeaeaff',
        placeholder     => '969896ff',
        input           => 'eaeaeaff',
        match           => '7aa6daff',
        selection       => '424242ff',
        selection_text  => 'eaeaeaff',
        selection_match => 'd54e53ff',
        counter         => '969896ff'
    );
}

__END__

=head1 NAME

i3-select-theme

=head1 SYNOPSIS

i3-select-theme [options] < day | night | morning | bright >

=head1 DESCRIPTION

Update GTK, Emacs, Alacritty, and Fuzzel to matching "day", "night", "morning",
or "bright" themes. Themes may be passed as a command line argument or, if none
is provided, selected via Fuzzel (or any other dmenu-compliant menu program).

=head1 OPTIONS

=over 4

=item B<-h, --help>

=item B<-v, --version>

=item B<-d, --dmenu-cmd>

Choose your preferred dmenu-compatible menu command (e.g., rofi). Default is fuzzel.

=back

=head1 AUTHOR

Daniel Hennigar <danrhennigar@gmail.com>

=head1 LICENSE AND COPYRIGHT

Copyright (C) 2025 Daniel Hennigar

This script is free software; you can redistribute it and/or
modify it under the same terms as Perl itself.

=cut
