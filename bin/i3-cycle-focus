#!/usr/bin/env perl

# i3-cycle-focus --- emulate "Alt-Tab" behaviour in sway/i3

# Copyright (C) 2024 Daniel Hennigar

# This program is free software; you can redistribute it and/or modify
# it under the terms of either:

#	a) the Artistic License 2.0, or
#	b) the GNU General Public License as published by the Free Software
#	   Foundation; either version 3, or (at your option) any later version.

# See the LICENSE file for more information.

use 5.040;
use Carp;
use English      qw(-no_match_vars);
use Getopt::Long qw(:config auto_help auto_version);
use AnyEvent::I3 qw(:all);

our $VERSION = '0.01';
my $focused;
my @siblings;

GetOptions() or croak 'Could not parse options';

my $i3 = i3();
$i3->connect->recv or croak 'Failed to connect to i3.';

my $initial_tree = $i3->get_tree->recv
  or croak 'Could not get initial tree';

# find the first node matching $criteria, a CODE ref which returns a boolean
sub find_node {
    my ( $node, $criteria ) = @_;

    if ( ref $node ne 'HASH' || ref $criteria ne 'CODE' ) {
        croak 'find_node expects a HASH and CODE ref as arguments';
    }

    if ( $criteria->($node) ) {
        return $node;
    }

    for my $child ( @{ $node->{nodes} || [] } ) {
        my $target_node = find_node( $child, $criteria );
        return $target_node if $target_node;
    }
}

# find all nodes matching $criteria, a CODE ref which returns a boolean
sub find_nodes {
    my ( $node, $criteria, $is_root, $children ) = @_;

    if ( ref $node ne 'HASH' || ref $criteria ne 'CODE' ) {
        croak 'find_nodes expects a HASH and CODE ref as arguments';
    }

    if ( ( !$is_root && $criteria->($node) ) ) {
        push @{$children}, $node;
    }

    foreach my $child ( @{ $node->{nodes} || [] },
        @{ $node->{floating_nodes} || [] } )
    {
        find_nodes( $child, $criteria, 0, $children );
    }
    return @{$children};
}

# update the list of windows on the current workspace
sub update_data {
    my ($tree) = @_;

    $i3->get_workspaces->cb(
        sub {
            my @workspaces = @{ $_[0]->{_ae_sent}[0] };

            my $current_workspace_name;
            foreach my $ws (@workspaces) {
                if ( $ws->{focused} ) {
                    $current_workspace_name = $ws->{name};
                }
            }
            if ( not $current_workspace_name ) {
                carp 'Could not get current workspace name.';
                return 0;
            }

            my $is_current_workspace = sub {
                $_[0]->{type} eq 'workspace'
                  && $_[0]->{name} eq $current_workspace_name;
            };
            my $workspace = find_node( $tree, $is_current_workspace );
            if ( not $workspace ) {
                carp 'Could not get current workspace.';
                return 0;
            }

            my $is_focused = sub { $_[0]->{focused} };
            $focused = find_node( $workspace, $is_focused );
            if ( not $focused ) {
                carp 'Could not find focused window';
                return 0;
            }

            my $has_name =
              sub { $_[0]->{type} eq 'con' &&
                    defined $_[0]->{name} &&
                    length $_[0]->{name} != 0 };
            @siblings = find_nodes( $workspace, $has_name, 1, [] );
            
            if ( not @siblings ) {
                carp 'Could not find sibling nodes.';
                return 0;
            }
        }
    );
    return 1;
}

# focus the next sibling before/after the currently focused window
sub cycle_focus {

    my ($reverse) = @_;
    if ($reverse) { @siblings = reverse @siblings }

    my $index = 0;
    while ( $index < @siblings && $siblings[$index]{id} != $focused->{id} ) {
        $index++;
    }
    
    my $next_id = $siblings[ ( $index + 1 ) % @siblings ]{id}
      or croak 'Could not find next ID';

    $i3->command("[con_id=$next_id] focus")
      or croak 'Could not send i3 command.';

    return (1);
}

# initialize window list with the initial tree on startup
update_data($initial_tree) or croak 'failed to initalize data';

# subscribe to i3 events via IPC
# update window data on window events, cycle focus on tick events
$i3->subscribe(
    {
        window => sub {
            my ($event) = shift;
            if ( $event->{change} eq 'focus' ) {
                my $timer;
                $timer = AnyEvent->timer(
                    after => 0.1,
                    cb    => sub {
                        $i3->get_tree->cb(
                            sub {
                                my ($tree_condvar) = @_;
                                my $tree = $tree_condvar->{_ae_sent}[0];
                                update_data($tree) or
                                  croak 'failed to update data';
                            }
                        );
                        undef $timer;
                    }
                );
            }
        },
        tick => sub {
            my ($event) = shift;
            
            if ( $event->{first} ) {
                return;
            }
            if ( $event->{payload} eq 'cycle-focus' ) {
                cycle_focus(0) or croak 'cycle focus failed.';
            }
            if ( $event->{payload} eq 'cycle-focus-reverse' ) {
                cycle_focus(1) or croak 'cycle focus failed.';
            }
        },
        shutdown => sub {
            exit 0;
        }
    }
)->recv->{success} or croak 'Could not subscribe to i3 events.';

# stop the process if there is an error in i3 communication
$i3->subscribe(
    {
        _error => sub {
            croak 'Error in i3 connection';
        }
    }
)->recv;

AE::cv->recv;

__END__

=pod

=head1 NAME

i3-cycle-focus - Cycle through the windows on the current i3/sway workspace

=head1 SYNOPSIS

=over 4

    i3-cycle-focus [options]

=back

=head1 DESCRIPTION

Emulate 'alt-tab' behavior for i3/sway, cycling the focus among the windows on
the current workspace. I find this easier than managing "containers" myself.

=head1 OPTIONS

=over 4

=item B<--help>

Print help information

=item B<--reverse>

Reverse the direction of focus cycling (often this is counter-clockwise)

=back

=head1 AUTHOR

Daniel Hennigar <danrhennigar@gmail.com>

=head1 LICENSE AND COPYRIGHT

Copyright (C) 2025 Daniel Henngiar

Licensed under the Artistic License 2.0 and GNU GPL.

=cut
